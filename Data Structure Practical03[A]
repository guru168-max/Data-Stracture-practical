                                                    Traversal in the link list.
PROGRAM:
#include<stdio.h>
#include<stdlib.h>
struct Node{
int data;
struct Node * next;
};
void linkedListTraversal(struct Node *ptr)
{
while (ptr != NULL)
{
printf("Element: %d\n", ptr->data);
ptr = ptr->next;
}
}
int main(){
struct Node *head;
struct Node *second;
struct Node *third;
struct Node *fourth;
head = (struct Node *)malloc(sizeof(struct Node));
second = (struct Node *)malloc(sizeof(struct Node));
third = (struct Node *)malloc(sizeof(struct Node));
fourth = (struct Node *)malloc(sizeof(struct Node));
head->data = 5;
head->next = second;
second->data = 10;
second->next = third;
third->data = 15;
third->next = fourth;
fourth->data = 25;
fourth->next = NULL;
printf("Linked list travell\n");
linkedListTraversal(head);
return 0;
}

                                             [B]:- Inserting an element at beginning in linked list
PROGARM:-
#include<stdio.h>
#include<stdlib.h>
struct Node{
int data;
struct Node * next;
};
void linkedListTraversal(struct Node *ptr)
{
while (ptr != NULL)
{
printf("Element: %d\n", ptr->data);
ptr = ptr->next;
}
}
struct Node * insertAtFirst(struct Node *head, int data)
{
struct Node * ptr = (struct Node *) malloc(sizeof(struct Node));
ptr->data = data;
ptr->next = head;
return ptr; 
}
int main(){
struct Node *head;
struct Node *second;
struct Node *third;
struct Node *fourth;
head = (struct Node *)malloc(sizeof(struct Node));
second = (struct Node *)malloc(sizeof(struct Node));
third = (struct Node *)malloc(sizeof(struct Node));
fourth = (struct Node *)malloc(sizeof(struct Node));
head->data = 5;
head->next = second;
second->data = 10;
second->next = third;
third->data = 15;
third->next = fourth;
fourth->data = 25;
fourth->next = NULL;
printf("Linked list travell\n");
linkedListTraversal(head);
head = insertAtFirst(head, 100);
printf("\nLinked list after insertion\n");
linkedListTraversal(head);
}
                                                       [C]:- Inserting element at specific index or position in linked list.
PROGARM:- #include<stdio.h>
#include<stdlib.h>
struct Node{
int data;
struct Node * next;
};
void linkedListTraversal(struct Node *ptr)
{
while (ptr != NULL)
{
printf("Element: %d\n", ptr->data);
ptr = ptr->next;
}
}
struct Node * insertAtIndex(struct Node *head, int data, int index){
struct Node * ptr = (struct Node *) malloc(sizeof(struct Node));
struct Node * p = head;
int i = 0;
while (i!=index-1)
{
p = p->next;
i++;
}
ptr->data = data;
ptr->next = p->next;
p->next = ptr;
return head;
}
int main(){
struct Node *head;
struct Node *second;
struct Node *third;
struct Node *fourth;
head = (struct Node *)malloc(sizeof(struct Node));
second = (struct Node *)malloc(sizeof(struct Node));
third = (struct Node *)malloc(sizeof(struct Node));
fourth = (struct Node *)malloc(sizeof(struct Node));
head->data = 56;
head->next = second;
second->data = 74;
second->next = third;
third->data = 444;
third->next = fourth;
fourth->data = 96;
fourth->next = NULL;
printf("Linked list travell\n");
linkedListTraversal(head);
head = insertAtIndex(head, 11, 3);
printf("\nLinked list after insertion\n");
linkedListTraversal(head);
}
                                                      Insertion element at last position in linked list.
PROGRAM:-
#include<stdio.h>
#include<stdlib.h>
struct Node{
int data;
struct Node * next;
};
void linkedListTraversal(struct Node *ptr)
{
while (ptr != NULL)
{
printf("Element: %d\n", ptr->data);
ptr = ptr->next;
}
}
struct Node * insertAtEnd(struct Node *head, int data){
struct Node * ptr = (struct Node *) malloc(sizeof(struct Node));
ptr->data = data;
struct Node * p = head;
while(p->next!=NULL){
p = p->next;
}
p->next = ptr;
ptr->next = NULL;
return head;
}
int main(){
struct Node *head;
struct Node *second;
struct Node *third;
struct Node *fourth;
head = (struct Node *)malloc(sizeof(struct Node));
second = (struct Node *)malloc(sizeof(struct Node));
third = (struct Node *)malloc(sizeof(struct Node));
fourth = (struct Node *)malloc(sizeof(struct Node));
head->data = 10;
head->next = second;
second->data = 15;
second->next = third;
third->data = 44;
third->next = fourth;
fourth->data = 6;
fourth->next = NULL;
printf("Linked list travell\n");
linkedListTraversal(head);
head = insertAtEnd(head, 99);
printf("\nLinked list after insertion\n");
linkedListTraversal(head);
}

 
